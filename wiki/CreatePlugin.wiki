#summary How to create a CarFrontEnd plugin

== Purpose ==
This section will show you how to setup and build a Xcode project to create a CarFrontEnd plugin, then install it.

== Prerequisites ==
You must have the CarFrontEndAPI framework installed on your development host. For the purposes of this discussion, it will be assumed that you have installed it as _/Library/Frameworks/CarFrontEndAPI.framework_.

You should also be using the latest version of [http://developer.apple.com/tools/xcode/ Xcode] which is available from Apple's developer website.

== Project Creation ==
  # Start XCode (_/Developer/Applications/Xcode_)
  # Create a new Project (_File->New Project..._)
  # Select *Cocoa Bundle* as the project type.
  # Give your project a name and location.
  # Edit the Project Settings (_Project->Edit Project Settings..._)
    * General Tab
      # Set the Cross-Development _Target to 10.4 (Universal)_.
  # Edit the Active Target Settings (_Project->Edit Active Target_).
    * Build Tab
      # Set the _Configuration_ to "All Configurations".
      # Set _Show_ to "All Settings" if it is not already.
      # Set the _Architectures_ to "ppc i386". (Universal build)
      # Set _Mach-O Type_ to "Bundle".
      # Set _Wrapper Extension_ to "cfep".
  # Add the CarFrontEndAPI framework to your project.
    # Right click on _Frameworks_ in the "Groups & Files".
    # Select "Add->Existing Frameworks...".
    # Navigate to where you installed CarFrontEndAPI (the default location is _/Library/Frameworks/CarFrontEndAPI.framework_) and select it.
    # Click the "ADD" button with no other changes.
  # Add your primary class to the Project
    # Right click on _Classes_ in the "Groups & Files" area.
    # Select "Add->New File...".
    # Select "Objective-C Class"
    # Give the new class a name.
  # Edit your header file.
    # Add the import for `<CarFrontEndAPI/CarFrontEndAPI.h>`
    # Update the `@interface` line to include the _CarFrontEndProtocol_ designation.
    # Add the required methods to conform to the protocol.
    # Go ahead and add an action so we can add a button.
    * You header should look something like:
      {{{
      #import <Cocoa/Cocoa.h>
      #import <CarFrontEndAPI/CarFrontEndAPI.h>

      @interface SamplePlugin : NSObject <CarFrontEndProtocol> {
          IBOutlet NSView     *samplePluginView;
      }

      - (NSString *) name;
      - (void) initalize;
      - (NSImage *) pluginButtonImage;
      - (NSView *) contentViewForSize: (NSSize) size;
      - (void) removePluginFromView;

      - (IBAction) buttonClicked: (id) sender;

      @end
      }}}
  # Edit the class file
    # Add a static variable outside the _@implementation_ section.
      * This will allow you to apply the Singleton pattern to the object.
      * The init method will be called twice. Once when the plugin is loaded and once when you load your NIB file.
    # Add an init method to setup your object.
      * Make sure to use your static variable so that there is only ever one instance of your object.
    # Add the protocol methods to the _@implementation_.
    # Add the code for your action method.
    * Your object file should look something like:
      {{{
      #import "SamplePlugin.h"

      static SamplePlugin *sharedSP = nil;

      @implementation SamplePlugin

      - (id) init {
          if (sharedSP != nil) {
              [self release];
              return(sharedSP);
          }

          [super init];

          // Setup for a single instance.
          sharedSP = self;

          return(self);
      }

      - (NSString *) name {
          return(@"Sample Plugin");
      }

      - (void) initalize {
          // No-op for this example.
          //  Should generate the button image here rather than on demand.
      }

      - (NSImage *) pluginButtonImage {
      	NSMutableDictionary *attributes = [NSMutableDictionary dictionary];

          [attributes setObject:[NSFont fontWithName:@"Helvetica" size:26]
                         forKey:NSFontAttributeName];
      	[attributes setObject:[NSColor whiteColor]
                         forKey:NSForegroundColorAttributeName];

          NSSize          size = [[self name] sizeWithAttributes:attributes];
          NSImage         *image = [[[NSImage alloc] initWithSize:size] autorelease];

          [image lockFocus];
          [[self name] drawAtPoint:NSZeroPoint withAttributes:attributes];
          [image unlockFocus];

          return(image);
      }

      - (NSView *) contentViewForSize: (NSSize) size {
          // We are ignoring the size value, but it is there incase you have differnt
          //  views based on the size that CarFrontEnd sends you.
          if (samplePluginView == nil) {
              [NSBundle loadNibNamed:@"SamplePlugin" owner:self];
          }

          return(samplePluginView);
      }

      - (void) removePluginFromView {
          // No-op
          //  If you need to do something when your view is no longer displayed,
          //  add the code here.
      }

      - (IBAction) buttonClicked: (id) sender {
          if ([[sender stringValue] isEqualToString:@"Click"]) {
              [sender setString:@"Clock"];
          } else if ([[sender stringValue] isEqualToString:@"Clock"]) {
              [sender setString:@"Click"];
          }
      }

      @end
      }}}
  # Add a NIB file to your project and make sure that it uses the name that you used in your _-contentViewForSize:_ method ("SamplePlugin" in the example).
    # Read your object's header file into the NIB file.
    # Instantiate your object.
    # Add a NSView to your NIB file and link it to your NSView outlet.
    # Add a NSButton to your NSView.
      # Set it's string value to "Click".
      # Set it's action to the _-buttonClick:_ method of you object.
  # Edit your project's _Info.plist_
    # Set the "PrincipalClass" value to the name of your object.
